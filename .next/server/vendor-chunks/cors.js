/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cors";
exports.ids = ["vendor-chunks/cors"];
exports.modules = {

/***/ "(ssr)/./node_modules/cors/lib/index.js":
/*!****************************************!*\
  !*** ./node_modules/cors/lib/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function() {\n    \"use strict\";\n    var assign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\n    var vary = __webpack_require__(/*! vary */ \"(ssr)/./node_modules/vary/index.js\");\n    var defaults = {\n        origin: \"*\",\n        methods: \"GET,HEAD,PUT,PATCH,POST,DELETE\",\n        preflightContinue: false,\n        optionsSuccessStatus: 204\n    };\n    function isString(s) {\n        return typeof s === \"string\" || s instanceof String;\n    }\n    function isOriginAllowed(origin, allowedOrigin) {\n        if (Array.isArray(allowedOrigin)) {\n            for(var i = 0; i < allowedOrigin.length; ++i){\n                if (isOriginAllowed(origin, allowedOrigin[i])) {\n                    return true;\n                }\n            }\n            return false;\n        } else if (isString(allowedOrigin)) {\n            return origin === allowedOrigin;\n        } else if (allowedOrigin instanceof RegExp) {\n            return allowedOrigin.test(origin);\n        } else {\n            return !!allowedOrigin;\n        }\n    }\n    function configureOrigin(options, req) {\n        var requestOrigin = req.headers.origin, headers = [], isAllowed;\n        if (!options.origin || options.origin === \"*\") {\n            // allow any origin\n            headers.push([\n                {\n                    key: \"Access-Control-Allow-Origin\",\n                    value: \"*\"\n                }\n            ]);\n        } else if (isString(options.origin)) {\n            // fixed origin\n            headers.push([\n                {\n                    key: \"Access-Control-Allow-Origin\",\n                    value: options.origin\n                }\n            ]);\n            headers.push([\n                {\n                    key: \"Vary\",\n                    value: \"Origin\"\n                }\n            ]);\n        } else {\n            isAllowed = isOriginAllowed(requestOrigin, options.origin);\n            // reflect origin\n            headers.push([\n                {\n                    key: \"Access-Control-Allow-Origin\",\n                    value: isAllowed ? requestOrigin : false\n                }\n            ]);\n            headers.push([\n                {\n                    key: \"Vary\",\n                    value: \"Origin\"\n                }\n            ]);\n        }\n        return headers;\n    }\n    function configureMethods(options) {\n        var methods = options.methods;\n        if (methods.join) {\n            methods = options.methods.join(\",\"); // .methods is an array, so turn it into a string\n        }\n        return {\n            key: \"Access-Control-Allow-Methods\",\n            value: methods\n        };\n    }\n    function configureCredentials(options) {\n        if (options.credentials === true) {\n            return {\n                key: \"Access-Control-Allow-Credentials\",\n                value: \"true\"\n            };\n        }\n        return null;\n    }\n    function configureAllowedHeaders(options, req) {\n        var allowedHeaders = options.allowedHeaders || options.headers;\n        var headers = [];\n        if (!allowedHeaders) {\n            allowedHeaders = req.headers[\"access-control-request-headers\"]; // .headers wasn't specified, so reflect the request headers\n            headers.push([\n                {\n                    key: \"Vary\",\n                    value: \"Access-Control-Request-Headers\"\n                }\n            ]);\n        } else if (allowedHeaders.join) {\n            allowedHeaders = allowedHeaders.join(\",\"); // .headers is an array, so turn it into a string\n        }\n        if (allowedHeaders && allowedHeaders.length) {\n            headers.push([\n                {\n                    key: \"Access-Control-Allow-Headers\",\n                    value: allowedHeaders\n                }\n            ]);\n        }\n        return headers;\n    }\n    function configureExposedHeaders(options) {\n        var headers = options.exposedHeaders;\n        if (!headers) {\n            return null;\n        } else if (headers.join) {\n            headers = headers.join(\",\"); // .headers is an array, so turn it into a string\n        }\n        if (headers && headers.length) {\n            return {\n                key: \"Access-Control-Expose-Headers\",\n                value: headers\n            };\n        }\n        return null;\n    }\n    function configureMaxAge(options) {\n        var maxAge = (typeof options.maxAge === \"number\" || options.maxAge) && options.maxAge.toString();\n        if (maxAge && maxAge.length) {\n            return {\n                key: \"Access-Control-Max-Age\",\n                value: maxAge\n            };\n        }\n        return null;\n    }\n    function applyHeaders(headers, res) {\n        for(var i = 0, n = headers.length; i < n; i++){\n            var header = headers[i];\n            if (header) {\n                if (Array.isArray(header)) {\n                    applyHeaders(header, res);\n                } else if (header.key === \"Vary\" && header.value) {\n                    vary(res, header.value);\n                } else if (header.value) {\n                    res.setHeader(header.key, header.value);\n                }\n            }\n        }\n    }\n    function cors(options, req, res, next) {\n        var headers = [], method = req.method && req.method.toUpperCase && req.method.toUpperCase();\n        if (method === \"OPTIONS\") {\n            // preflight\n            headers.push(configureOrigin(options, req));\n            headers.push(configureCredentials(options, req));\n            headers.push(configureMethods(options, req));\n            headers.push(configureAllowedHeaders(options, req));\n            headers.push(configureMaxAge(options, req));\n            headers.push(configureExposedHeaders(options, req));\n            applyHeaders(headers, res);\n            if (options.preflightContinue) {\n                next();\n            } else {\n                // Safari (and potentially other browsers) need content-length 0,\n                //   for 204 or they just hang waiting for a body\n                res.statusCode = options.optionsSuccessStatus;\n                res.setHeader(\"Content-Length\", \"0\");\n                res.end();\n            }\n        } else {\n            // actual response\n            headers.push(configureOrigin(options, req));\n            headers.push(configureCredentials(options, req));\n            headers.push(configureExposedHeaders(options, req));\n            applyHeaders(headers, res);\n            next();\n        }\n    }\n    function middlewareWrapper(o) {\n        // if options are static (either via defaults or custom options passed in), wrap in a function\n        var optionsCallback = null;\n        if (typeof o === \"function\") {\n            optionsCallback = o;\n        } else {\n            optionsCallback = function(req, cb) {\n                cb(null, o);\n            };\n        }\n        return function corsMiddleware(req, res, next) {\n            optionsCallback(req, function(err, options) {\n                if (err) {\n                    next(err);\n                } else {\n                    var corsOptions = assign({}, defaults, options);\n                    var originCallback = null;\n                    if (corsOptions.origin && typeof corsOptions.origin === \"function\") {\n                        originCallback = corsOptions.origin;\n                    } else if (corsOptions.origin) {\n                        originCallback = function(origin, cb) {\n                            cb(null, corsOptions.origin);\n                        };\n                    }\n                    if (originCallback) {\n                        originCallback(req.headers.origin, function(err2, origin) {\n                            if (err2 || !origin) {\n                                next(err2);\n                            } else {\n                                corsOptions.origin = origin;\n                                cors(corsOptions, req, res, next);\n                            }\n                        });\n                    } else {\n                        next();\n                    }\n                }\n            });\n        };\n    }\n    // can pass either an options hash, an options delegate, or nothing\n    module.exports = middlewareWrapper;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29ycy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUM7SUFFQztJQUVBLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0lBQ3JCLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0lBRW5CLElBQUlFLFdBQVc7UUFDYkMsUUFBUTtRQUNSQyxTQUFTO1FBQ1RDLG1CQUFtQjtRQUNuQkMsc0JBQXNCO0lBQ3hCO0lBRUEsU0FBU0MsU0FBU0MsQ0FBQztRQUNqQixPQUFPLE9BQU9BLE1BQU0sWUFBWUEsYUFBYUM7SUFDL0M7SUFFQSxTQUFTQyxnQkFBZ0JQLE1BQU0sRUFBRVEsYUFBYTtRQUM1QyxJQUFJQyxNQUFNQyxPQUFPLENBQUNGLGdCQUFnQjtZQUNoQyxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUgsY0FBY0ksTUFBTSxFQUFFLEVBQUVELEVBQUc7Z0JBQzdDLElBQUlKLGdCQUFnQlAsUUFBUVEsYUFBYSxDQUFDRyxFQUFFLEdBQUc7b0JBQzdDLE9BQU87Z0JBQ1Q7WUFDRjtZQUNBLE9BQU87UUFDVCxPQUFPLElBQUlQLFNBQVNJLGdCQUFnQjtZQUNsQyxPQUFPUixXQUFXUTtRQUNwQixPQUFPLElBQUlBLHlCQUF5QkssUUFBUTtZQUMxQyxPQUFPTCxjQUFjTSxJQUFJLENBQUNkO1FBQzVCLE9BQU87WUFDTCxPQUFPLENBQUMsQ0FBQ1E7UUFDWDtJQUNGO0lBRUEsU0FBU08sZ0JBQWdCQyxPQUFPLEVBQUVDLEdBQUc7UUFDbkMsSUFBSUMsZ0JBQWdCRCxJQUFJRSxPQUFPLENBQUNuQixNQUFNLEVBQ3BDbUIsVUFBVSxFQUFFLEVBQ1pDO1FBRUYsSUFBSSxDQUFDSixRQUFRaEIsTUFBTSxJQUFJZ0IsUUFBUWhCLE1BQU0sS0FBSyxLQUFLO1lBQzdDLG1CQUFtQjtZQUNuQm1CLFFBQVFFLElBQUksQ0FBQztnQkFBQztvQkFDWkMsS0FBSztvQkFDTEMsT0FBTztnQkFDVDthQUFFO1FBQ0osT0FBTyxJQUFJbkIsU0FBU1ksUUFB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QUFLWSxhQUFhbkMsS0FBS21CLEtBQUtLOzRCQUM5Qjt3QkFDRjtvQkFDRixPQUFPO3dCQUNMQTtvQkFDRjtnQkFDRjtZQUNGO1FBQ0Y7SUFDRjtJQUVBLG1FQUFtRTtJQUNuRWMsT0FBT0MsT0FBTyxHQUFHVjtBQUVuQiIsInNvdXJjZXMiOlsid2VicGFjazovL3Rlc3QtcHJvai8uL25vZGVfbW9kdWxlcy9jb3JzL2xpYi9pbmRleC5qcz82NDI3Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG4gIHZhciB2YXJ5ID0gcmVxdWlyZSgndmFyeScpO1xuXG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICBvcmlnaW46ICcqJyxcbiAgICBtZXRob2RzOiAnR0VULEhFQUQsUFVULFBBVENILFBPU1QsREVMRVRFJyxcbiAgICBwcmVmbGlnaHRDb250aW51ZTogZmFsc2UsXG4gICAgb3B0aW9uc1N1Y2Nlc3NTdGF0dXM6IDIwNFxuICB9O1xuXG4gIGZ1bmN0aW9uIGlzU3RyaW5nKHMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHMgPT09ICdzdHJpbmcnIHx8IHMgaW5zdGFuY2VvZiBTdHJpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpc09yaWdpbkFsbG93ZWQob3JpZ2luLCBhbGxvd2VkT3JpZ2luKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYWxsb3dlZE9yaWdpbikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsb3dlZE9yaWdpbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaXNPcmlnaW5BbGxvd2VkKG9yaWdpbiwgYWxsb3dlZE9yaWdpbltpXSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcoYWxsb3dlZE9yaWdpbikpIHtcbiAgICAgIHJldHVybiBvcmlnaW4gPT09IGFsbG93ZWRPcmlnaW47XG4gICAgfSBlbHNlIGlmIChhbGxvd2VkT3JpZ2luIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gYWxsb3dlZE9yaWdpbi50ZXN0KG9yaWdpbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAhIWFsbG93ZWRPcmlnaW47XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlndXJlT3JpZ2luKG9wdGlvbnMsIHJlcSkge1xuICAgIHZhciByZXF1ZXN0T3JpZ2luID0gcmVxLmhlYWRlcnMub3JpZ2luLFxuICAgICAgaGVhZGVycyA9IFtdLFxuICAgICAgaXNBbGxvd2VkO1xuXG4gICAgaWYgKCFvcHRpb25zLm9yaWdpbiB8fCBvcHRpb25zLm9yaWdpbiA9PT0gJyonKSB7XG4gICAgICAvLyBhbGxvdyBhbnkgb3JpZ2luXG4gICAgICBoZWFkZXJzLnB1c2goW3tcbiAgICAgICAga2V5OiAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJyxcbiAgICAgICAgdmFsdWU6ICcqJ1xuICAgICAgfV0pO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmcob3B0aW9ucy5vcmlnaW4pKSB7XG4gICAgICAvLyBmaXhlZCBvcmlnaW5cbiAgICAgIGhlYWRlcnMucHVzaChbe1xuICAgICAgICBrZXk6ICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nLFxuICAgICAgICB2YWx1ZTogb3B0aW9ucy5vcmlnaW5cbiAgICAgIH1dKTtcbiAgICAgIGhlYWRlcnMucHVzaChbe1xuICAgICAgICBrZXk6ICdWYXJ5JyxcbiAgICAgICAgdmFsdWU6ICdPcmlnaW4nXG4gICAgICB9XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzQWxsb3dlZCA9IGlzT3JpZ2luQWxsb3dlZChyZXF1ZXN0T3JpZ2luLCBvcHRpb25zLm9yaWdpbik7XG4gICAgICAvLyByZWZsZWN0IG9yaWdpblxuICAgICAgaGVhZGVycy5wdXNoKFt7XG4gICAgICAgIGtleTogJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsXG4gICAgICAgIHZhbHVlOiBpc0FsbG93ZWQgPyByZXF1ZXN0T3JpZ2luIDogZmFsc2VcbiAgICAgIH1dKTtcbiAgICAgIGhlYWRlcnMucHVzaChbe1xuICAgICAgICBrZXk6ICdWYXJ5JyxcbiAgICAgICAgdmFsdWU6ICdPcmlnaW4nXG4gICAgICB9XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhlYWRlcnM7XG4gIH1cblxuICBmdW5jdGlvbiBjb25maWd1cmVNZXRob2RzKG9wdGlvbnMpIHtcbiAgICB2YXIgbWV0aG9kcyA9IG9wdGlvbnMubWV0aG9kcztcbiAgICBpZiAobWV0aG9kcy5qb2luKSB7XG4gICAgICBtZXRob2RzID0gb3B0aW9ucy5tZXRob2RzLmpvaW4oJywnKTsgLy8gLm1ldGhvZHMgaXMgYW4gYXJyYXksIHNvIHR1cm4gaXQgaW50byBhIHN0cmluZ1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAga2V5OiAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kcycsXG4gICAgICB2YWx1ZTogbWV0aG9kc1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb25maWd1cmVDcmVkZW50aWFscyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuY3JlZGVudGlhbHMgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogJ0FjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzJyxcbiAgICAgICAgdmFsdWU6ICd0cnVlJ1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBjb25maWd1cmVBbGxvd2VkSGVhZGVycyhvcHRpb25zLCByZXEpIHtcbiAgICB2YXIgYWxsb3dlZEhlYWRlcnMgPSBvcHRpb25zLmFsbG93ZWRIZWFkZXJzIHx8IG9wdGlvbnMuaGVhZGVycztcbiAgICB2YXIgaGVhZGVycyA9IFtdO1xuXG4gICAgaWYgKCFhbGxvd2VkSGVhZGVycykge1xuICAgICAgYWxsb3dlZEhlYWRlcnMgPSByZXEuaGVhZGVyc1snYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1oZWFkZXJzJ107IC8vIC5oZWFkZXJzIHdhc24ndCBzcGVjaWZpZWQsIHNvIHJlZmxlY3QgdGhlIHJlcXVlc3QgaGVhZGVyc1xuICAgICAgaGVhZGVycy5wdXNoKFt7XG4gICAgICAgIGtleTogJ1ZhcnknLFxuICAgICAgICB2YWx1ZTogJ0FjY2Vzcy1Db250cm9sLVJlcXVlc3QtSGVhZGVycydcbiAgICAgIH1dKTtcbiAgICB9IGVsc2UgaWYgKGFsbG93ZWRIZWFkZXJzLmpvaW4pIHtcbiAgICAgIGFsbG93ZWRIZWFkZXJzID0gYWxsb3dlZEhlYWRlcnMuam9pbignLCcpOyAvLyAuaGVhZGVycyBpcyBhbiBhcnJheSwgc28gdHVybiBpdCBpbnRvIGEgc3RyaW5nXG4gICAgfVxuICAgIGlmIChhbGxvd2VkSGVhZGVycyAmJiBhbGxvd2VkSGVhZGVycy5sZW5ndGgpIHtcbiAgICAgIGhlYWRlcnMucHVzaChbe1xuICAgICAgICBrZXk6ICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzJyxcbiAgICAgICAgdmFsdWU6IGFsbG93ZWRIZWFkZXJzXG4gICAgICB9XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhlYWRlcnM7XG4gIH1cblxuICBmdW5jdGlvbiBjb25maWd1cmVFeHBvc2VkSGVhZGVycyhvcHRpb25zKSB7XG4gICAgdmFyIGhlYWRlcnMgPSBvcHRpb25zLmV4cG9zZWRIZWFkZXJzO1xuICAgIGlmICghaGVhZGVycykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChoZWFkZXJzLmpvaW4pIHtcbiAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLmpvaW4oJywnKTsgLy8gLmhlYWRlcnMgaXMgYW4gYXJyYXksIHNvIHR1cm4gaXQgaW50byBhIHN0cmluZ1xuICAgIH1cbiAgICBpZiAoaGVhZGVycyAmJiBoZWFkZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiAnQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnMnLFxuICAgICAgICB2YWx1ZTogaGVhZGVyc1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBjb25maWd1cmVNYXhBZ2Uob3B0aW9ucykge1xuICAgIHZhciBtYXhBZ2UgPSAodHlwZW9mIG9wdGlvbnMubWF4QWdlID09PSAnbnVtYmVyJyB8fCBvcHRpb25zLm1heEFnZSkgJiYgb3B0aW9ucy5tYXhBZ2UudG9TdHJpbmcoKVxuICAgIGlmIChtYXhBZ2UgJiYgbWF4QWdlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiAnQWNjZXNzLUNvbnRyb2wtTWF4LUFnZScsXG4gICAgICAgIHZhbHVlOiBtYXhBZ2VcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlIZWFkZXJzKGhlYWRlcnMsIHJlcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gaGVhZGVycy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgIHZhciBoZWFkZXIgPSBoZWFkZXJzW2ldO1xuICAgICAgaWYgKGhlYWRlcikge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICAgICAgYXBwbHlIZWFkZXJzKGhlYWRlciwgcmVzKTtcbiAgICAgICAgfSBlbHNlIGlmIChoZWFkZXIua2V5ID09PSAnVmFyeScgJiYgaGVhZGVyLnZhbHVlKSB7XG4gICAgICAgICAgdmFyeShyZXMsIGhlYWRlci52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGVhZGVyLnZhbHVlKSB7XG4gICAgICAgICAgcmVzLnNldEhlYWRlcihoZWFkZXIua2V5LCBoZWFkZXIudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29ycyhvcHRpb25zLCByZXEsIHJlcywgbmV4dCkge1xuICAgIHZhciBoZWFkZXJzID0gW10sXG4gICAgICBtZXRob2QgPSByZXEubWV0aG9kICYmIHJlcS5tZXRob2QudG9VcHBlckNhc2UgJiYgcmVxLm1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuXG4gICAgaWYgKG1ldGhvZCA9PT0gJ09QVElPTlMnKSB7XG4gICAgICAvLyBwcmVmbGlnaHRcbiAgICAgIGhlYWRlcnMucHVzaChjb25maWd1cmVPcmlnaW4ob3B0aW9ucywgcmVxKSk7XG4gICAgICBoZWFkZXJzLnB1c2goY29uZmlndXJlQ3JlZGVudGlhbHMob3B0aW9ucywgcmVxKSk7XG4gICAgICBoZWFkZXJzLnB1c2goY29uZmlndXJlTWV0aG9kcyhvcHRpb25zLCByZXEpKTtcbiAgICAgIGhlYWRlcnMucHVzaChjb25maWd1cmVBbGxvd2VkSGVhZGVycyhvcHRpb25zLCByZXEpKTtcbiAgICAgIGhlYWRlcnMucHVzaChjb25maWd1cmVNYXhBZ2Uob3B0aW9ucywgcmVxKSk7XG4gICAgICBoZWFkZXJzLnB1c2goY29uZmlndXJlRXhwb3NlZEhlYWRlcnMob3B0aW9ucywgcmVxKSk7XG4gICAgICBhcHBseUhlYWRlcnMoaGVhZGVycywgcmVzKTtcblxuICAgICAgaWYgKG9wdGlvbnMucHJlZmxpZ2h0Q29udGludWUpIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2FmYXJpIChhbmQgcG90ZW50aWFsbHkgb3RoZXIgYnJvd3NlcnMpIG5lZWQgY29udGVudC1sZW5ndGggMCxcbiAgICAgICAgLy8gICBmb3IgMjA0IG9yIHRoZXkganVzdCBoYW5nIHdhaXRpbmcgZm9yIGEgYm9keVxuICAgICAgICByZXMuc3RhdHVzQ29kZSA9IG9wdGlvbnMub3B0aW9uc1N1Y2Nlc3NTdGF0dXM7XG4gICAgICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtTGVuZ3RoJywgJzAnKTtcbiAgICAgICAgcmVzLmVuZCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhY3R1YWwgcmVzcG9uc2VcbiAgICAgIGhlYWRlcnMucHVzaChjb25maWd1cmVPcmlnaW4ob3B0aW9ucywgcmVxKSk7XG4gICAgICBoZWFkZXJzLnB1c2goY29uZmlndXJlQ3JlZGVudGlhbHMob3B0aW9ucywgcmVxKSk7XG4gICAgICBoZWFkZXJzLnB1c2goY29uZmlndXJlRXhwb3NlZEhlYWRlcnMob3B0aW9ucywgcmVxKSk7XG4gICAgICBhcHBseUhlYWRlcnMoaGVhZGVycywgcmVzKTtcbiAgICAgIG5leHQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtaWRkbGV3YXJlV3JhcHBlcihvKSB7XG4gICAgLy8gaWYgb3B0aW9ucyBhcmUgc3RhdGljIChlaXRoZXIgdmlhIGRlZmF1bHRzIG9yIGN1c3RvbSBvcHRpb25zIHBhc3NlZCBpbiksIHdyYXAgaW4gYSBmdW5jdGlvblxuICAgIHZhciBvcHRpb25zQ2FsbGJhY2sgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgbyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3B0aW9uc0NhbGxiYWNrID0gbztcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9uc0NhbGxiYWNrID0gZnVuY3Rpb24gKHJlcSwgY2IpIHtcbiAgICAgICAgY2IobnVsbCwgbyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBjb3JzTWlkZGxld2FyZShyZXEsIHJlcywgbmV4dCkge1xuICAgICAgb3B0aW9uc0NhbGxiYWNrKHJlcSwgZnVuY3Rpb24gKGVyciwgb3B0aW9ucykge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgbmV4dChlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBjb3JzT3B0aW9ucyA9IGFzc2lnbih7fSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgICAgICAgIHZhciBvcmlnaW5DYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgaWYgKGNvcnNPcHRpb25zLm9yaWdpbiAmJiB0eXBlb2YgY29yc09wdGlvbnMub3JpZ2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvcmlnaW5DYWxsYmFjayA9IGNvcnNPcHRpb25zLm9yaWdpbjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvcnNPcHRpb25zLm9yaWdpbikge1xuICAgICAgICAgICAgb3JpZ2luQ2FsbGJhY2sgPSBmdW5jdGlvbiAob3JpZ2luLCBjYikge1xuICAgICAgICAgICAgICBjYihudWxsLCBjb3JzT3B0aW9ucy5vcmlnaW4pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3JpZ2luQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIG9yaWdpbkNhbGxiYWNrKHJlcS5oZWFkZXJzLm9yaWdpbiwgZnVuY3Rpb24gKGVycjIsIG9yaWdpbikge1xuICAgICAgICAgICAgICBpZiAoZXJyMiB8fCAhb3JpZ2luKSB7XG4gICAgICAgICAgICAgICAgbmV4dChlcnIyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb3JzT3B0aW9ucy5vcmlnaW4gPSBvcmlnaW47XG4gICAgICAgICAgICAgICAgY29ycyhjb3JzT3B0aW9ucywgcmVxLCByZXMsIG5leHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIGNhbiBwYXNzIGVpdGhlciBhbiBvcHRpb25zIGhhc2gsIGFuIG9wdGlvbnMgZGVsZWdhdGUsIG9yIG5vdGhpbmdcbiAgbW9kdWxlLmV4cG9ydHMgPSBtaWRkbGV3YXJlV3JhcHBlcjtcblxufSgpKTtcbiJdLCJuYW1lcyI6WyJhc3NpZ24iLCJyZXF1aXJlIiwidmFyeSIsImRlZmF1bHRzIiwib3JpZ2luIiwibWV0aG9kcyIsInByZWZsaWdodENvbnRpbnVlIiwib3B0aW9uc1N1Y2Nlc3NTdGF0dXMiLCJpc1N0cmluZyIsInMiLCJTdHJpbmciLCJpc09yaWdpbkFsbG93ZWQiLCJhbGxvd2VkT3JpZ2luIiwiQXJyYXkiLCJpc0FycmF5IiwiaSIsImxlbmd0aCIsIlJlZ0V4cCIsInRlc3QiLCJjb25maWd1cmVPcmlnaW4iLCJvcHRpb25zIiwicmVxIiwicmVxdWVzdE9yaWdpbiIsImhlYWRlcnMiLCJpc0FsbG93ZWQiLCJwdXNoIiwia2V5IiwidmFsdWUiLCJjb25maWd1cmVNZXRob2RzIiwiam9pbiIsImNvbmZpZ3VyZUNyZWRlbnRpYWxzIiwiY3JlZGVudGlhbHMiLCJjb25maWd1cmVBbGxvd2VkSGVhZGVycyIsImFsbG93ZWRIZWFkZXJzIiwiY29uZmlndXJlRXhwb3NlZEhlYWRlcnMiLCJleHBvc2VkSGVhZGVycyIsImNvbmZpZ3VyZU1heEFnZSIsIm1heEFnZSIsInRvU3RyaW5nIiwiYXBwbHlIZWFkZXJzIiwicmVzIiwibiIsImhlYWRlciIsInNldEhlYWRlciIsImNvcnMiLCJuZXh0IiwibWV0aG9kIiwidG9VcHBlckNhc2UiLCJzdGF0dXNDb2RlIiwiZW5kIiwibWlkZGxld2FyZVdyYXBwZXIiLCJvIiwib3B0aW9uc0NhbGxiYWNrIiwiY2IiLCJjb3JzTWlkZGxld2FyZSIsImVyciIsImNvcnNPcHRpb25zIiwib3JpZ2luQ2FsbGJhY2siLCJlcnIyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cors/lib/index.js\n");

/***/ })

};
;